{"mappings":"oeACO,MAUMA,EAAOC,IAClB,IACE,MAAMC,EAAkBC,aAAaC,QAAQH,GAC7C,OAA2B,OAApBC,OAA2BG,EAAYC,KAAKC,MAAML,EAG3D,CAFE,MAAOM,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,QAC3C,GCjBF,IAAAC,EAAAC,EAAA,S,0BAMO,MAAMC,EAAsBC,MAAOC,EAAaC,KACrD,IAAIC,EAAa,GACjBC,EAAAC,KAAKF,WAAWG,UAAY,GACf,gBAAbJ,EACIE,EAAAC,KAAKF,WAAWI,aAAa,gBAAiB,WAC9CH,EAAAC,KAAKF,WAAWI,aAAa,gBAAiB,SAClD,MAAMC,EAAU,GAEhB,GAAmBjB,MAAfU,EAA0B,CAC5B,IAAK,MAAMQ,KAASR,EAAa,CAC/B,IAAIS,QAAiBb,EAAAc,eAAeC,gBAAgBH,EAAMI,QAASJ,EAAMK,MAAMC,MAAKC,GAAOA,IAC3FN,EAAW,IACNA,EACHO,UAAW,IAAIP,EAASQ,OAAOC,KAAIC,GAASA,EAAMC,MAClDC,WAAYb,EAAMK,MAEpBN,EAAQe,KAAKb,EACf,CACAP,EAAa,IAAIK,SACT,EAAAgB,EAAAC,kBAAiBtB,GACvBuB,0BACJ,GCvBIC,EAAgBC,SAASC,cAAc,oBACvCC,EAAcF,SAASC,cAAc,kBAE3C,IAAIE,EAAc7C,EAAK,eAEvByC,EAAcK,iBAAiB,SAAS,KACtCF,EAAYG,UAAUC,OAAO,0BAC7BP,EAAcM,UAAUE,IAAI,0BAC5BJ,EAAc7C,EAAK,eACnBa,EAAoBgC,EAAa,kBAEnCD,EAAYE,iBAAiB,SAAS,KACpCL,EAAcM,UAAUC,OAAO,0BAC/BJ,EAAYG,UAAUE,IAAI,0BAC1BJ,EAAc7C,EAAK,aACnBa,EAAoBgC,EAAa,gBAGnChC,EAAoBgC,EAAa","sources":["src/js/library/localStorage.js","src/js/library/helper.js","src/library.js"],"sourcesContent":["// zapisać w pamięci lokalnej przeglądarki użytkownika\nexport const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\n// ładowanie\nexport const load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\n//usuwanie\nexport const remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\n\n\n\n// export const addToLibrary = (movieId, type, listType = 'watchedList') => {\n//   const libraryList = load(listType);\n//   if (libraryList == undefined) {\n//     let tempWatchedList = [];\n//     tempWatchedList.push({\n//       movieId,\n//       type,\n//     });\n//     return save(listType, tempWatchedList);\n//   }\n\n//   let alreadyInList = false;\n//   libraryList.forEach(movie => {\n//     if (movie.id == movieId && movie.type === type) {\n//       alreadyInList = true;\n//     }\n//   });\n\n//   if (alreadyInList) return alert('Movie already on the list.');\n\n//   libraryList.push({\n//     movieId,\n//     type,\n//   });\n//   return save(listType, libraryList);\n// };\n\n\n// export const removeFromLibrary = (movieId, type, listType = 'watchedList') => {\n//   let libraryList = load(listType);\n\n//   libraryList = libraryList.filter(movie => {\n//     if (movie.id != movieId) {\n//       return movie;\n//     }\n//   });\n\n//   return save(listType, libraryList);\n// };\n","import { FetchApiMovies } from \"../api/fetchMovies\";\nimport { renderMoviesList } from \"../templates/renderMovies\";\nimport { refs } from \"../refs/refs\";\n\n//import { } from \"../components/modal\";\n\nexport const getAllLibraryMovies = async (libraryList, listType) => {\n  let moviesList = [];\n  refs.moviesList.innerHTML = '';\n  listType === 'watchedList'\n    ? refs.moviesList.setAttribute('data-listtype', 'watched')\n    : refs.moviesList.setAttribute('data-listtype', 'queue');\n  const tempObj = [];\n\n  if (libraryList != undefined) {\n    for (const movie of libraryList) {\n      let response = await FetchApiMovies.getMovieDetails(movie.movieId, movie.type).then(res => res);\n      response = {\n        ...response,\n        genre_ids: [...response.genres.map(genre => genre.id)],\n        media_type: movie.type,\n      };\n      tempObj.push(response);\n    }\n    moviesList = [...tempObj];\n      await renderMoviesList(moviesList);\n      addModalListenerFunction();\n  }\n};\n","import './sass/index.scss';\nimport { load } from './js/library/localStorage';\nimport { getAllLibraryMovies } from './js/library/helper';\n\nconst watchedButton = document.querySelector('[js-btn-watched]');\nconst queueButton = document.querySelector('[js-btn-queue]');\n\nlet libraryList = load('watchedList');\n\nwatchedButton.addEventListener('click', () => {\n  queueButton.classList.remove('library__btn--selected');\n  watchedButton.classList.add('library__btn--selected');\n  libraryList = load('watchedList');\n  getAllLibraryMovies(libraryList, 'watchedList');\n});\nqueueButton.addEventListener('click', () => {\n  watchedButton.classList.remove('library__btn--selected');\n  queueButton.classList.add('library__btn--selected');\n  libraryList = load('queueList');\n  getAllLibraryMovies(libraryList, 'queueList');\n});\n\ngetAllLibraryMovies(libraryList, 'watchedList');"],"names":["$233deba56ead58f5$export$11e63f7b0f3d9900","key","serializedState","localStorage","getItem","undefined","JSON","parse","error","console","message","$gIXsy","parcelRequire","$99dcbb4c27ef45c6$export$bd5fb83736f582f7","async","libraryList","listType","moviesList","$3ILHO","refs","innerHTML","setAttribute","tempObj","movie","response","FetchApiMovies","getMovieDetails","movieId","type","then","res","genre_ids","genres","map","genre","id","media_type","push","$24ni3","renderMoviesList","addModalListenerFunction","$ce3726a01b8ab25a$var$watchedButton","document","querySelector","$ce3726a01b8ab25a$var$queueButton","$ce3726a01b8ab25a$var$libraryList","addEventListener","classList","remove","add"],"version":3,"file":"library.1630406e.js.map"}